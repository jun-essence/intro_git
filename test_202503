■クラウドのメリット
・データセンタの選定やサーバ機器の手配、手続き作業コストを最小化できるため、短期間にITシステム環境を構築できる。
・システムの構築後でもサーバのスペックを変更したり、動的にリソースをスケールしたりできるため、最初から厳密にサイジング作業を行う必要がない。
・クラウドベンダが提供している環境は災害対策・障害・セキュリティ対策などが組み込まれて構築されているため、非機能要件への対応コストを削減できる。
　また、AIやビックデータなどの先端技術を用いた付加価値の高いデータ処理を容易に実行できる。

■クラウドのデメリット
・自社のデータセンタでは実現できていた、柔軟なトラブル対応や安定したパフォーマンスが保証されない。
・利用するリソース・サービスによっては詳細なチューニングができず、機能要件の実現が難しいケースがある
・完全閉塞したネットワーク環境を構築可能なオンプレミス環境に比べ、セキュリティの脆弱性をついた攻撃に晒されやすくなる。


■帰納法
帰納法とは、「妥当性の高い論理を導くための手法」と語られることが多いが、帰納法の本来の価値とは、数多くの「法則」を発見することです。

帰納法の「帰納」とは、「物事が落ち着いて(帰)、結論に納まる(納)状態」を示します。この意味合い通り、帰納法とは、複数の物事から共通点を発見して結論を導き出す推論法のことを指します。

----------------------------------
帰納法＝複数の事実から共通点を発見して、結論に導き出す推論法
----------------------------------
※推論力の技法は「頭の使い方」で習得する

帰納法を発見させたのは、イギリスの哲学者であるフランシス・ベーコン（1561年1月22日 - 1626年4月9日）と言われている。ベーコンは、観察や実験などを繰り返し行うことによって、経験を少しずつ積み、結果的に真理に到達するという「経験論」を唱えた。その基礎になったのが、「複数の事実から共通点を導き出して結論を導き出す」帰納法です。

帰納法の推論が成立しているかどうかの立証は、結論に対して「なぜならば」っという接続詞を使って推論プロセスを逆算してみることでチェックします。

▽例
・結論
　広告代理店A社は真面目な社風だ。
・共通点
　なぜならば、広告代理店A社の社員は、真面目な性格が共通しているから。
・その根拠は、事実として広告代理店A社の伊藤さん、佐藤さん、近藤さんは、真面目な性格だから。。。

★帰納法を扱う際の留意点（入念にチェックする！）
・事実に偏りがある場合
・共通点の発見に飛躍がある場合
・結論部分に飛躍がある場合

★帰納法の弱点
帰納法は、一言でいえば「複数の事実から共通点を発見して結論を導き出す推論法」だが、これは別の言い方をすれば「限られたサンプルから共通点を発見して、それを全体に当てはめて結論を出す推論法」でもある。
そして、「限られたサンプルを全体に当てはめる」以上、推論は「部分から全体へ」、「特殊から普遍へ」、「具体から概念へ」と向かう性質をもつことになります。

いわば、「一握りの出来事」を、そこから離れた「全体に当てはめる」という性質を持つのだから、推論が飛躍する可能性をゼロにすることはできません。

このことから、帰納法によって得た結果は、「100％論理的に正しい結論」ではなく「理論的に確からしさが高い結論」という位置づけにとどめざるをえない。

したがって帰納法を「論理的な正解を導き出す推論法」として厳密に捉えるのではなく、複数の事実を元に共通点を「洞察」し、推論プロセスを相手と共通する「コミュニケーションツール」として捉えた方が、現実的で実用的です。

★ビジネスにおける帰納法の活用局面
・環境の変化を捉えて、方針や戦略を策定する局面
①複数の事実
　複数の市場環境の変化から
②共通点の発見
　その奥底に流れる共通のメカニズムを見出して、
③結論
　そのメカニズムを味方につけられる方針や戦略を策定する
　
・世の中の事象から法則を発見し、学びに変える局面
①事実a～c
　事実a　　　　　　　　　　　　事実b　　　　　　　　　　事実c　　
　水は「飲めるもの」である　　水は「洗うもの」である　　水は「火を消せるもの」である
　　↓
　抽象化
　　↓
②共通点の発見
　この3つの共通点は、モノ(=水)を抽象化して「コト」として捉え直したことである
③結論(方針)
　「モノ」から「コト」を抜き出すと、その実体が持つ複数の「価値」を発見できる
　
★帰納法の頭の使い方の手順
①様々な事実に気づく
・実態を観察し情報収集する
②複数の事実の共通点を発見する
・観察を通して得られた複数の事実から「直接的に」共通点を発見する方法
・観察を通して得られた複数の事実から「洞察を通して」共通点を発見する方法
③結論の法則を見出す　　　





■AWSがクラウドサービスを展開しているリージョン

AWSは現在、全世界の地域（リージョン）に、クラウドサービスを展開しています。
・AWSがクラウドサービスを展開しているリージョン
https://aws.amazon.com/jp/about-aws/global-infrastructure/

日本にあるWebサイトを構築したい場合は、一般的に、AWSユーザーはサービスを提供するリージョンに「アジアパシフィック（東京）／リージョンコード：ap-northeast-1」を選択します。
理由としては、さー＾ビスを利用するユーザー（エンドユーザー）が最も高速にアクセスできる（低レイテンシ：遅延が少ない）リージョンを指定するのが普通です。

または、高度な可用性が求められるシステムでは、災害対策の１つとして複数リージョンでのシステム構成（マルチリージョン構成）が選択肢として挙がることがあります。この場合の留意すべき事項として、各リージョンで利用可能なマネージドサービスに差がある場合があるので確認が必要です。

AWSの一部のマネージドサービス（S3やDynamoDBなど）では、各リージョンでデータを同期するクロスリージョンレプリケーション機能をサポートしているので、マルチリージョン構成にする際は、要件に応じて活用すると良いでしょう。

★AWSが展開するアベイラビリティゾーン

AWSの各リージョンは、複数のデータセンタからなる「アベイラビリティゾーン（Availability Zone：AZ）」と、外部のネットワークとの接続を行うデータセンタである「トランジット」を組み合わせた単位で構成されています。また、アベイラビリティゾーン自体は、多数のサーバからなる１つ以上のデータセンタで構成されています。

★エッジロケーションとリージョナルエッジキャッシュ
AWSは上記のリージョンに加え、エッジロケーションとリージョナルエッジキャッシュは、Amazon CloudFrontの機能で、コンテンツを高速に配信するために利用されます。

【エッジロケーション】
・ユーザーに近いネットワークでのアクセスを提供するサービス﻿
・エッジサーバーでコンテンツをキャッシュすることで、配信の高速化とオリジンサーバーへの負荷の軽減を行う﻿
・高可用性や低遅延、高スループットといったメリットがある﻿
【リージョナルエッジキャッシュ】
・エッジロケーションとオリジンの間に位置し、コンテンツをキャッシュする機能﻿
・エッジロケーションよりも多くのキャッシュを保持するため、オリジンサーバーへのリクエスト数を減少させ、オリジンサーバーの負荷を軽減する﻿
・アクセスの多いコンテンツの表示速度の高速化に貢献する﻿
・追加での設定は必要なくデフォルトで有効となっている﻿
・エッジロケーションとリージョナルエッジキャッシュを組み合わせることで、ユーザーの地理的な位置に関係なく、低遅延でコンテンツを配信することができます。

﻿■AWSが展開するサービス

AWSでは、ITサービスの構築において使用頻度の高いミドルウェアやアプリケーション処理の一部を、高い非機能性を持つ「マネージドサービス」として提供してます。そして、すべてのサービスでAPIが提供されており、AWSユーザーは、後述するマネージメントコンソールなどを用いてAPIをコールすることで、サービスを実行できます。

https://aws.amazon.com/jp/products/


■AWSのサービスの利用方法

★サービスを利用する３つの方法
AWSでは各サービスでAPIを公開しており、ユーザーはAPIを実行してクラウド環境や各サービスを利用できます。APIを実行する方法は以下の通り３種類あります。

・AWSマネージメントコンソール
　AWSのサイトからログインして各サービスを実行・利用する方法。視覚的にわかりやすいため、この方法が一般的に最も広く利用されている。サービス運用状況の確認時などにも利用される。
・AWS CLI(Command Link Interface)
　自身のパソコン端末にあるターミナルなどのコマンドラインから各サービスを実行・利用する方法。AWS上に展開するアプリケーションを開発する場合など、サービスを高速か繰り返し起動・実行・停止する場合に適した方法。
・AWS SDK(Software Developers Kit)
　AWSが提供するSDKと呼ばれるライブラリを使って各サービスを利用する方法。この方法は主にアプリケーションから利用されることが想定されている。
▽SDKが提供されているプログラム言語
https://docs.aws.amazon.com/ja_jp/codebuild/latest/userguide/sdk-general-information-section.html

★AWSアカウントの作成時に行うべき10のこと
・管理者設定
　①ルートユーザーにMFA（Multi Factor Authorization：多要素認証）を設定する。
　②ルートユーザーの代わりに、管理者権限を割り当てたユーザーを作成する。それ以降、ルートユーザーは極力使用しない。
　③作成した管理ユーザーに請求情報へのアクセス権（AdministratorAccess）を付与する。
・アカウント監視設定
　④すべてのAWS API呼び出しを記録するように、CloudTrailを設定する。
　⑤AWS Configを有効化して、AWSリソース（EC2やVPCなど）の構成変更を記録する。
　⑥CostExplorerを有効化して、使用料金を確認できるようにする。
　⑦CostExplorerで予算を設定し、メールによる通知設定を行う。
　⑧Amazon GurdDutyを有効化して、セキュリティ脅威を監視する。
・最小限の動作確認
　⑨動作確認のために、最初のサーバーを作成してログインできることを確認する。確認したら削除する。
　⑩手元のPCでAWS CLIを起動し、操作する（オプション）
　
★認証情報の取り扱い
AWS CLIやSDKを利用する場合は、上記のAWSアカウントに関する各種設定を行った後で、マネージメントコンソールを使って、「アプリケーション開発者用ユーザー」を作成し、
認証情報（アクセスキーとシークレットキー）を払い出します。この認証情報があれば、AWS CLIやSDKを用いて、各サービスのAPIを実行できるようになります。　
　
